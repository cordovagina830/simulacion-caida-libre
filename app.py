# ----------------------------- 
# SimulaciÃ³n completa: CaÃ­da libre (correcciÃ³n para slider y fÃ³rmula)
# -----------------------------

import numpy as np
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import math

# ------------------------------------------------
# Constante
g = 9.8  # m/s^2
# ------------------------------------------------

# -------------------------
# FunciÃ³n para formatear a 2 decimales sin redondear
# -------------------------
def trunc2(x):
    return math.floor(x * 100) / 100

# -------------------------
# Funciones de escena/actualizaciÃ³n
# -------------------------
def create_scene(h0):
    """Crea figura con regla vertical y texto de fase dentro del grÃ¡fico."""
    fig, ax = plt.subplots(figsize=(4, 6))
    ax.set_xlim(-1.0, 0.6)
    ax.set_ylim(0, max(1.0, h0 * 1.2))
    ax.axis('off')

    # Suelo
    ax.hlines(0, -0.5, 0.5, color='saddlebrown', linewidth=6, zorder=1)

    # Regla vertical
    xruler = -0.85
    ax.vlines(xruler, 0, h0 if h0 > 0 else 1.0, color='black', linewidth=2, zorder=2)
    tick_len = 0.04
    for h in np.arange(0, max(h0, 1) + 1, 1):
        ax.hlines(h, xruler, xruler + tick_len, color='black', linewidth=1, zorder=3)
        ax.text(xruler - 0.04, h, f"{int(h)} m", fontsize=8, va='center', ha='right', color='black')

    # TamaÃ±o visual del objeto
    radius = max(0.12, min(0.25, h0 * 0.03))

    # Objeto (pelota)
    circle = patches.Circle((0, h0), radius, color='dodgerblue', ec='navy', zorder=5)
    ax.add_patch(circle)

    # Flecha de velocidad
    arrow = patches.FancyArrowPatch((0, h0 - radius - 0.05), (0, h0 - radius - 0.35),
                                    arrowstyle='->', mutation_scale=20, color='orange', linewidth=3, zorder=6)
    ax.add_patch(arrow)

    # Textos dinÃ¡micos
    t_text = ax.text(-0.9, max(1.0, h0 * 1.2) * 0.9, "", fontsize=11, color='black')
    v_text = ax.text(-0.9, max(1.0, h0 * 1.2) * 0.85, "", fontsize=11, color='orange')
    y_text = ax.text(-0.9, max(1.0, h0 * 1.2) * 0.8, "", fontsize=11, color='green')
    phase_text = ax.text(0.0, max(1.0, h0 * 1.2) * 0.95, "", fontsize=11, ha='center', va='bottom', color='blue')

    # Tiempo estimado de caÃ­da
    t_end = np.sqrt(2 * h0 / g) if h0 > 0 else 0.0

    return fig, ax, circle, arrow, t_text, v_text, y_text, radius, phase_text, t_end

def update_scene(frame_idx, fig, ax, circle, arrow, t_text, v_text, y_text, radius, phase_text, h0, show_formulas, frames=200):
    """Actualiza la figura y construye HTML con fÃ³rmulas (valores truncados a 2 decimales sin redondeo)."""
    # Convertir frame a tiempo
    t_end = np.sqrt(2 * h0 / g) if h0 > 0 else 0.0
    t = (frame_idx / (frames - 1)) * t_end if frames > 1 else 0.0

    # Valores fÃ­sicos
    vi = 0.0  # Velocidad inicial asumida
    # PosiciÃ³n vertical (y)
    y = max(h0 - 0.5 * g * t ** 2, 0.0)
    v = vi + g * t

    # Calcular los tÃ©rminos de y = vi*t + 0.5*g*t^2 con precisiÃ³n completa
    term1 = vi * t
    term2 = 0.5 * g * (t ** 2)
    d = term1 + term2  # Desplazamiento calculado con precisiÃ³n

    # Mover cÃ­rculo (asegurando movimiento vertical)
    circle.center = (0.0, y)  # La coordenada x debe permanecer en 0.0 para caÃ­da vertical

    # Actualizar flecha
    start = (0.0, y - radius - 0.05)
    max_visual = max(0.28, h0 * 0.35)
    arrow_len = min(max_visual, 0.18 + 0.35 * (v / (np.sqrt(2 * g * h0) + 1e-9))) if h0 > 0 else 0.18
    end = (0.0, y - radius - 0.05 - arrow_len)
    try:
        arrow.set_positions(start, end)
    except Exception:
        try:
            arrow.remove()
        except Exception:
            pass
        arrow = patches.FancyArrowPatch(start, end, arrowstyle='->', mutation_scale=20, color='orange', linewidth=3, zorder=6)
        ax.add_patch(arrow)

    # Textos numÃ©ricos (truncados a 2 decimales sin redondeo)
    t_text.set_text(f"t = {trunc2(t)} s")
    v_text.set_text(f"v = {trunc2(v)} m/s")
    y_text.set_text(f"y = {trunc2(y)} m")

    # Mensajes dinÃ¡micos
    if t < 1e-6:
        phase_text.set_text("El objeto estÃ¡ suspendido en el aire. PrepÃ¡rate para soltarlo.")
        phase_text.set_color('blue')
    elif y > 1e-3:
        phase_text.set_text("La gravedad acelera el objeto: la velocidad aumenta con el tiempo.")
        phase_text.set_color('green')
    else:
        phase_text.set_text("Â¡La bola ha llegado al suelo! En ausencia de aire, cae con aceleraciÃ³n constante.")
        phase_text.set_color('red')

    fig.canvas.draw()

    # FÃ³rmulas con sustituciÃ³n (valores truncados a 2 decimales sin redondeo)
    info_html = ""
    if show_formulas:
        # Calcular valores para mostrar (truncados)
        vi_s = trunc2(vi)
        g_s = trunc2(g)
        t_s = trunc2(t)
        term1_s = trunc2(term1)
        term2_s = trunc2(term2)
        d_s = trunc2(d)
        v_s = trunc2(v)
        # Mostrar paso a paso
        info_html = f"""
        FÃ³rmulas (sustituciÃ³n numÃ©rica â€” pasos):
          vf = vi + g t â†’ {vi_s} + {g_s}Â·({t_s}) = {v_s} m/s
          y = viÂ·t + Â½Â·gÂ·tÂ² â†’ 
             Sustituyendo: {vi_s}Â·{t_s} + 0.5Â·{g_s}Â·({t_s})Â²  
             TÃ©rminos: {term1_s} + {term2_s}  
             Suma: {d_s} m
          t = (vf - vi)/g â†’ ({v_s} - {vi_s})/{g_s} = {trunc2((v - vi) / g)} s
        """
    else:
        info_html = "FÃ³rmulas ocultas."

    return info_html

# -------------------------
# FunciÃ³n principal simplificada
# -------------------------
def main():
    print("ðŸŒŸ SimulaciÃ³n Interactiva de CaÃ­da Libre sin Resistencia del Aire ðŸŒŸ")
    print("En esta simulaciÃ³n observarÃ¡s cÃ³mo una bola cae bajo la acciÃ³n de la gravedad, sin resistencia del aire.")
    print("La simulaciÃ³n muestra que, sin aire, la masa no afecta el tiempo de caÃ­da.")
    print("\n" + "="*50)
    
    # ParÃ¡metros de simulaciÃ³n
    h0 = 5.0  # Altura inicial
    show_formulas = True
    
    print(f"\nSimulando caÃ­da desde {h0} metros...")
    print("Presiona Enter para avanzar en el tiempo (q para salir)")
    
    # Crear escena
    fig, ax, circle, arrow, t_text, v_text, y_text, radius, phase_text, t_end = create_scene(h0)
    
    # SimulaciÃ³n paso a paso
    frames = 20  # Menos frames para simulaciÃ³n por consola
    for frame in range(frames):
        input(f"Frame {frame+1}/{frames} (Enter para continuar): ")
        
        info = update_scene(frame, fig, ax, circle, arrow, t_text, v_text, y_text, radius, phase_text, h0, show_formulas, frames)
        
        # Mostrar informaciÃ³n en consola
        print(f"\n--- Tiempo: {frame/(frames-1)*t_end:.2f}s ---")
        print(info)
        plt.pause(0.1)  # Pausa para ver la actualizaciÃ³n
    
    plt.show()

if __name__ == "__main__":
    main()
